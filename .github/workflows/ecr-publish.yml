name: Build and Push to AWS ECR

on:
  push:
    branches: [ main ]
  workflow_dispatch:
  release:
    types: [published]

permissions:
  id-token: write   # required for OIDC
  contents: read

env:
  AWS_REGION: ap-south-1
  ECR_REPOSITORY: spring-petclinic   # must match Terraform var ecr_repository_name
  # Optional: set IMAGE_TAG strategy below

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: 'maven'

      - name: Build with Maven
        run: ./mvnw -B -ntp package -DskipTests

      # Configure AWS credentials via OIDC (role created by Terraform)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/spring-petclinic-github-ecr-push-production
          aws-region: ${{ env.AWS_REGION }}

      - name: Extract metadata (tags)
        id: meta
        run: |
          SHA_TAG=${GITHUB_SHA::7}
          if [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
            VERSION_TAG=${GITHUB_REF_NAME}
          elif [[ "${GITHUB_EVENT_NAME}" == "release" ]]; then
            VERSION_TAG=${GITHUB_REF_NAME}
          else
            VERSION_TAG=latest
          fi
          echo "sha_tag=$SHA_TAG" >> $GITHUB_OUTPUT
          echo "version_tag=$VERSION_TAG" >> $GITHUB_OUTPUT

      - name: Login to Amazon ECR
        id: login-ecr
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
            echo "account_id=$ACCOUNT_ID" >> $GITHUB_OUTPUT
          aws ecr describe-repositories --repository-names "$ECR_REPOSITORY" >/dev/null 2>&1 || \
            aws ecr create-repository --repository-name "$ECR_REPOSITORY" --image-scanning-configuration scanOnPush=true --encryption-configuration encryptionType=AES256
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

      - name: Build container image
        run: |
          ACCOUNT_ID=${{ steps.login-ecr.outputs.account_id }}
          IMAGE_URI="$ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY"
          docker build -t "$IMAGE_URI:${{ steps.meta.outputs.sha_tag }}" -t "$IMAGE_URI:${{ steps.meta.outputs.version_tag }}" .

      - name: Push images
        run: |
          ACCOUNT_ID=${{ steps.login-ecr.outputs.account_id }}
          IMAGE_URI="$ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY"
          docker push "$IMAGE_URI:${{ steps.meta.outputs.sha_tag }}"
          docker push "$IMAGE_URI:${{ steps.meta.outputs.version_tag }}"

      - name: Output image references
        run: |
          ACCOUNT_ID=${{ steps.login-ecr.outputs.account_id }}
          IMAGE_URI="$ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY"
          echo "Pushed: $IMAGE_URI:${{ steps.meta.outputs.sha_tag }}"
          echo "Pushed: $IMAGE_URI:${{ steps.meta.outputs.version_tag }}"

      - name: Upload artifact (jar)
        uses: actions/upload-artifact@v4
        with:
          name: spring-petclinic-jar
          path: target/*.jar
          if-no-files-found: ignore

# Required repository configuration:
# 1. Set secret AWS_ACCOUNT_ID with your AWS Account ID (12 digits). No long-lived keys needed.
# 2. Ensure Terraform applied and created role: spring-petclinic-github-ecr-push-production in ap-south-1.
# 3. Trust policy limited to main branch; adjust Terraform if you need other branches/tags.
